import dataService, {
    Between,
    LessThan,
    LessThanOrEqual,
    MoreThan,
    MoreThanOrEqual
} from './data-service'
import {
    syncApi,
    syncStage,
    syncResources,
    getLatestResourceVersion,
    createResourceVersion,
    release,
    grantPermissions
} from '@bkui/apigateway-nodejs-sdk'
import openApiJson from '../conf/open-api.json'
import token from '../conf/token'
const apiName = '${apiName}'

// 基于 conditions 获取查询数据
export const parseConditions = (conditions) => {
    const {
        connector,
        expressions
    } = conditions
    const where = connector === 'or' ? [] : {}
    const getExpression = ({
        key,
        type,
        condition,
        value
    }) => {
        const whereCondition = {
            [key]: value
        }
        if (type === 'system' && value === '{{date}}') {
            whereCondition[key] = new Date()
        }
        switch (condition) {
            case '>':
                whereCondition[key] = MoreThan(whereCondition[key])
                break
            case '>=':
                whereCondition[key] = MoreThanOrEqual(whereCondition[key])
                break
            case '<':
                whereCondition[key] = LessThan(whereCondition[key])
                break
            case '<=':
                whereCondition[key] = LessThanOrEqual(whereCondition[key])
                break
        }
        return whereCondition
    }
    expressions.forEach((expression) => {
        if (connector === 'or') {
            where.push(getExpression(expression))
        } else {
            Object.assign(
                where,
                getExpression(expression)
            )
        }
    })
    return where
}

// 通过 key 过滤数据
export const filterTableDataWithKeys = async (tableName, query, page, pageSize, fields) => {
    // 时间类型的转换为区间
    const { columns } = dataService.getTableMetadata(tableName)
    Object.keys(query).forEach((key) => {
        const column = columns.find(column => column.propertyName === key)
        const val = query[key]
        if (Array.isArray(val) && val.length === 2 && column?.type === 'datetime') {
            query[key] = Between(val[0], val[1])
        }
    })
    const result = await dataService.get({
        tableFileName: tableName,
        page,
        pageSize,
        query
    })
    // 过滤
    if (fields && fields.length) {
        result.list = result.list.map((item) => {
            return fields.reduce((acc, cur) => {
                acc[cur] = item[cur]
                return acc
            }, {})
        })
    }
    return result
}

// 通过条件过滤数据
export const filterTableDataWithConditions = async (conditions, tableName, group, field) => {
    const query = parseConditions(conditions)
    let { list } = await dataService.get({
        tableFileName: tableName,
        query
    })
    // 聚合
    if (group) {
        const groupList = []
        list.forEach((item) => {
            const index = groupList.findIndex((x) => (x[group] === item[group]))
            if (index < 0) {
                groupList.push(item)
            }
        })
        list = groupList
    }
    return list.map((item) => ({
        id: item.id,
        [field]: item[field]
    }))
}

// ApiGateWay 上给 ITSM 授权
export const grantApiGWPermissionForItsm = async () => {
    console.log('开始同步网关')
    // 同步网关
    await syncApi(
        apiName,
        {
            description: 'generated by bk-lesscode'
        },
        token
    )
    console.log('同步网关成功', apiName)
    // 同步环境
    await syncStage(
        apiName,
        {
            name: process.env.BKPAAS_ENVIRONMENT,
            proxy_http: {
                timeout: 60,
                upstreams: {
                    loadbalance: 'roundrobin',
                    hosts: [
                        {
                            host: '',
                            weight: '100'
                        }
                    ]
                }
            }
        },
        token
    )
    console.log('同步环境成功', apiName)
    // 同步资源
    await syncResources(
        apiName,
        JSON.stringify(openApiJson),
        token
    )
    console.log('同步资源成功', apiName)
    // 获取网关最新版本
    const resourceVersion = await getLatestResourceVersion(apiName, token)
    console.log(resourceVersion, '=======================resourceVersion')
    if (!resourceVersion) {
        // 创建资源版本
        await createResourceVersion(
            apiName,
            {
                version: openApiJson.info.version,
                title: 'create new version'
            },
            token
        )
        console.log('创建资源版本成功', apiName)
        // 发布版本
        await release(
            apiName,
            {
                version: openApiJson.info.version,
                stage_names: [process.env.BKPAAS_ENVIRONMENT],
                comment: 'release new version'
            },
            token
        )
        console.log('发布版本成功', apiName)
        // 网关为应用主动授权
        await grantPermissions(
            apiName,
            {
                target_app_code: 'bk-itsm',
                grant_dimension: 'api'
            },
            token
        )
        console.log('网关为应用主动授权成功', apiName)
    }
}
